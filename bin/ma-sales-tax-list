#!/usr/bin/env hmperl
# The script below stopped working due to USPS website changes (why were we
# scraping?!), so I worked up a different solution:
#
# According to a map of zip code prefixes [1], MA uses 010-027.  I used easily
# findable zip code data [2], last updated in Jan 2012, to verify the zip code
# map.  The data revealed the map to be true, with the additions of two zip
# codes: 05501 and 05544 [3].  These are the zip codes for an IRS Service Center
# in Andover.
#
# I then built a SQL query to report the Hiveminder income from MA billing
# addresses:
#
#     select extract(year from created) as year,
#            sum(amount)/100 as ma_sales_dollars
#       from financial_transactions
#      where result_code=1
#        and country='US'
#        and zip similar to '(0(1[0-9]|2[0-7])%|055(01|44))'
#      group by year
#      order by year;
#
# [1] http://en.wikipedia.org/wiki/File:ZIP_Code_zones.svg
# [2] http://federalgovernmentzipcodes.us/free-zipcode-database.csv
# [3] tom@whaam ~ $ perl -aF, -nE '
#     ($z,$c,$s)=@F[1,3,4];
#     s/"//g for ($z,$c,$s);
#     say "$z - $c, $s" if lc($s) eq "ma" and $z !~ /^0(1[0-9]|2[0-7])/' \
#     < /tmp/free-zipcode-database.csv
#
#     05501 - ANDOVER, MA
#     05501 - IRS SERVICE CENTER, MA
#     05544 - ANDOVER, MA
#     05544 - IRS SERVICE CENTER, MA
#
use strict;
use warnings;

use Jifty;
BEGIN { Jifty->new }
use LWP::UserAgent;
use YAML;
use Text::CSV_XS; # HIVEMINDER OPTIONAL

# Cache the zip lookups
my $ZIPS = eval { YAML::LoadFile(".zipcodes.yml") } || {};
$SIG{INT} = sub { exit };
END { YAML::DumpFile(".zipcodes.yml", $ZIPS) if keys %{$ZIPS}; }


# Get all successful transactions in the US
my $txns = BTDT::Model::FinancialTransactionCollection->new(
    current_user => BTDT::CurrentUser->superuser
);
$txns->limit( column => "result_code", value => 1 );
$txns->limit( column => "country",     value => "US" );
$txns->order_by( column => "created" );

my %total;
my $csv = Text::CSV_XS->new( {eol => $/} );
open my $out, ">", "out.csv";
$csv->print($out, ["Timestamp", "First name", "Last name", "Amount", "City", "State", "Authorization code"]);
while (my $row = $txns->next) {
    my ($city, $state) = lookup($row->zip);
    next unless defined $state and $state eq "MA";
    $csv->print($out, [
        $row->created,
        $row->first_name,
        $row->last_name,
        $row->amount / 100,
        ucfirst(lc($city)),
        $state,
        $row->authorization_code,
    ]);
    $total{$row->created->year} += $row->amount / 100;
}
close $out;

print "Complete list written to out.csv\n";
for (sort keys %total) {
    printf "  Amount sold in MA in $_: \$%6.2f\n", $total{$_};
}

# We do zipcode lookup by scraping the USPS website
my $ua;
sub lookup {
    my $zip = shift;
    $zip =~ s/-.*$//;
    return @{$ZIPS->{$zip}} if exists $ZIPS->{$zip};

    $ua ||= LWP::UserAgent->new;
    my $res = $ua->post(
        'http://zip4.usps.com/zip4/zcl_3_results.jsp',
        {
            zip5 => $zip,
            submit => "Find ZIP Code"
        },
    );
    my $data = $res->content;

    # I'm a horrible person for using a regexp
    if ($data =~ m{<b>(.*?),\s*(.*?)</b>}g) {
        $ZIPS->{$zip} = [ $1, $2 ];
        return $1, $2;
    } else {
        $ZIPS->{$zip} = [ undef, undef ];
        return undef, undef;
    }
}

