use warnings;
use strict;

use BTDT::Test tests => 87, actual_server => 1;

my $admin     = BTDT::CurrentUser->superuser;
Jifty->web->current_user($admin);

my $server = Jifty::Test->make_server;
isa_ok($server, 'Jifty::TestServer');

my $URL = $server->started_ok;

my $mech = BTDT::Test->get_logged_in_mech($URL);

isa_ok($mech, 'Jifty::Test::WWW::Mechanize');
$mech->content_like(qr/Logout/i,"Logged in!");

go_to_addresses($mech);
# this warns from can_user_can because PublishedAddress sets all create
# request to be updates for permission checking.  Need to chase that and fix it.
$mech->click_button(value => 'Add a new address now!');
$mech->content_contains("my.hiveminder.com","New address added to the page");

my $address = ''; # autogenerated
if ($mech->content =~ /(\w+)\@my.hiveminder.com/) {
    $address = $1;
}
ok($address,"Found an address");

# simple mail
send_and_check_mail(mech => $mech, address => $address, subject => "New Mail Task");

# check that it rejects bad syntax
go_to_addresses($mech);
$mech->follow_link_ok(text => "Edit");
$mech->fill_in_action_ok($mech->moniker_for('BTDT::Action::UpdatePublishedAddress'),
                         auto_attributes => 'bad text');
$mech->click_button(value => 'Save');
TODO: {
local $TODO = "no error div on the update page, so this works in JS but not without it";
$mech->content_contains("'bad text' does not appear to be Braindump syntax");
}

# simple tag checking
go_to_addresses($mech);
$mech->follow_link_ok(text => "Edit");
$mech->fill_in_action_ok($mech->moniker_for('BTDT::Action::UpdatePublishedAddress'), auto_attributes => '[autotag]');
$mech->click_button(value => 'Save');
$mech->content_contains("[autotag]");
send_and_check_mail(mech => $mech, 
                    address => $address,
                    subject => "Testing Auto Attributes",
                    attribs => { tags => 'autotag' });

send_and_check_mail(mech => $mech, 
                    address => $address,
                    subject => "Testing More Auto Attributes [auto2]",
                    summary => "Testing More Auto Attributes",
                    attribs => { tags => 'auto2 autotag' });

go_to_addresses($mech);
$mech->follow_link_ok(text => "Edit");
$mech->fill_in_action_ok($mech->moniker_for('BTDT::Action::UpdatePublishedAddress'), auto_attributes => '[autotag] [autotag2]');
$mech->click_button(value => 'Save');
$mech->content_contains("[autotag] [autotag2]");

send_and_check_mail(mech => $mech, 
                    address => $address,
                    subject => "++Testing Auto Attributes and Priority",
                    summary => "Testing Auto Attributes and Priority",
                    attribs => { tags => 'autotag autotag2', priority => 5 });

# time to test multiple pieces of syntax 
# and checking to see that in addition to combining tags, we can 
# properly let people clobber

my $group = BTDT::Model::Group->new(current_user=> $admin);
$group->create( name => 'testGroup', description => 'testing');
ok ($group->id, " Created the group");


my $good = BTDT::Model::User->new(current_user => $admin);
$good->load_by_cols('email' => 'good@example.com');
ok($group->add_member( $good => 'member'));



go_to_addresses($mech);
$mech->follow_link_ok(text => "Edit");
$mech->fill_in_action_ok($mech->moniker_for('BTDT::Action::UpdatePublishedAddress'),
                         auto_attributes => '[autotagging] [due: today] [group: TestGROUP]');
$mech->click_button(value => 'Save');
$mech->content_contains("[autotagging] [due: today] [group: TestGROUP]");

my $tz = $mech->current_user->user_object->time_zone;
my $today = Jifty::DateTime->now( time_zone => $tz );
my $tomorrow = $today->clone->add(days => 1);

send_and_check_mail(mech => $mech, 
                    address => $address,
                    subject => "Testing Dates with Auto Attributes [due tomorrow]",
                    summary => "Testing Dates with Auto Attributes",
                    attribs => { tags => 'autotagging' , due => $today->ymd, group => $group->id });

# Need to be pro to test time worked and left
BTDT::Test->make_pro('good@example.com');
send_and_check_mail(
    mech    => $mech,
    address => $address,
    subject => "Testing estimate and whatnot [complete: 1] [due: today] [worked: 30m] [time: 2h]",
    summary => "Testing estimate and whatnot",
    attribs => {
        complete => 1,
        due      => $today->ymd,
        time_worked_seconds   => 30*60,
        time_estimate_seconds => 2*60*60,
    },
);

# automatic acceptance
go_to_addresses($mech);
$mech->content_contains("Hold new tasks");
$mech->follow_link_ok(text => "Edit");
$mech->fill_in_action_ok($mech->moniker_for('BTDT::Action::UpdatePublishedAddress'), auto_accept => 1, auto_attributes => '[autoaccept]');
$mech->click_button(value => 'Save');
$mech->content_contains("Accept new tasks automatically");

send_and_check_mail(mech => $mech,
                    address => $address,
                    subject => "Testing automatic acceptance",
                    summary => "Testing automatic acceptance",
                    attribs => { accepted => 1, tags => 'autoaccept' });

# make sure auto-accept doesn't work for other users

my $id = BTDT::CurrentUser->new(email => 'gooduser@example.com')->id;
send_and_check_mail(mech => $mech,
                    address => $address,
                    subject => "Acceptance by someone else [owner: otheruser\@example.com]",
                    summary => "Acceptance by someone else",
                    attribs => { accepted => 1, tags => 'autoaccept', owner_id => $id });

#
# utility functions
#

# take us to the address management page
# pass it a mech object
# will run 4 tests per call
sub go_to_addresses {
    my $mech = shift;
    $mech->get_ok($URL,"going back to inbox");
    $mech->follow_link_ok(text => 'Preferences',"following Preferences link");
    $mech->follow_link_ok(text => 'Tasks by email',"going to Tasks by email");
    ok($mech->action_form($mech->moniker_for('BTDT::Action::CreatePublishedAddress')),
       "Found published address action");
}

# run mailgate and check the task

# mech => mech object
# subject => the subject of your mail
# summary => the summary of your mail if it is different than the subject
# attribs => hashref of task attributes that should be set
#   { tags = "foo bar baz", due => "12/24/2009" }
sub send_and_check_mail {
    local $Test::Builder::Level = $Test::Builder::Level + 1;

    my %args = @_;
    my $mech = $args{mech};
    my $subject = $args{subject};
    my $summary = $args{summary}||$subject;

    unless ($mech && $subject) {
        BAIL_OUT("Didn't pass mech and subject");
    }

    is(BTDT::Test->mailgate("--url" => $URL, "--address" => $address, "--sender", 'good@example.com', "--message" => <<"EOT"), '', "Simple test mail");
From: good\@example.com
Subject: $subject

Content free body
EOT

    my $task = BTDT::Model::Task->new(current_user => $admin);
    $task->load_by_cols(summary => $summary);
    ok($task->id, "got a task from the mailgate");

    # unless we say we are, we are not auto-accepting the task
    $args{attribs}{accepted} ||= undef;

    # special cases
    if (my $due = delete $args{attribs}->{due}) {
        is($task->due->ymd, $due, "'due' set properly to '$due' on emailed task '$subject'");
    }

    if (my $group = delete $args{attribs}->{group}) {
        is($task->group->id, $group, "'group' set properly to '$group' on emailed task '$subject'");
    }

    # check each other attribute
    while (my ($k, $v) = each %{$args{attribs}}) {
        my $display = defined $v ? $v : 'undef';
        is($task->$k, $v, "'$k' set properly to '$display' on emailed task '$subject'");
    }
}

